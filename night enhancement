  import cv2
import numpy as np
import os
from tqdm import tqdm

# Path to the folder containing images
input_directory = r"C:\Users\91981\Desktop\OnePlus_Photo\Night_images"
output_directory = r'C:\Users\91981\Desktop\OnePlus_Photo\Night_images_enhanced_shivam'

# Create the output directory if it doesn't exist
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

# Get a list of all the image files in the folder
image_files_list = [file for file in os.listdir(input_directory) if file.endswith(('.png', '.jpg', '.jpeg', '.bmp'))]
total_files_count = len(image_files_list)

# Define a function to enhance night images
def enhance_night_images():
    with tqdm(total=total_files_count, desc="Enhancing images") as progress:
        for index, file_name in enumerate(image_files_list):
            # Load the image
            file_path = os.path.join(input_directory, file_name)
            original_image = cv2.imread(file_path)
            resized_image = cv2.resize(original_image, (812, 612))

            # Apply bilateral filter
            filtered_image = cv2.bilateralFilter(resized_image, 2, 8, 8)

            # Sharpen the image
            blurred_image = cv2.GaussianBlur(filtered_image, (3, 3), 2)
            sharpened_image = cv2.addWeighted(filtered_image, 1, blurred_image, -0.5, 0)

            # Adjust brightness and contrast
            brightness_matrix = np.ones(sharpened_image.shape, dtype="uint8") * 6
            contrast_matrix = np.ones(sharpened_image.shape) * 1.5
            bright_image = cv2.add(sharpened_image, brightness_matrix)
            bright_contrast_image = np.uint8(np.clip(cv2.multiply(np.float64(bright_image), contrast_matrix), 0, 255))

            # Histogram equalization function
            def equalize_histogram(image):
                channels = cv2.split(image)
                equalized_channels = [cv2.equalizeHist(channel) for channel in channels]
                equalized_image = cv2.merge(equalized_channels)
                return equalized_image

            # Apply histogram equalization
            equalized_image = equalize_histogram(bright_contrast_image)

            # Enhance the image further
            diff_image = cv2.absdiff(bright_contrast_image, sharpened_image)
            enhanced_image = cv2.add(6 * diff_image, sharpened_image)

            # Adaptive thresholding
            gray_image = cv2.cvtColor(enhanced_image, cv2.COLOR_BGR2GRAY)
            adaptive_threshold = cv2.adaptiveThreshold(gray_image, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2)
            adaptive_threshold = cv2.bitwise_not(adaptive_threshold)
            masked_image = cv2.add(enhanced_image, cv2.cvtColor(adaptive_threshold, cv2.COLOR_GRAY2BGR))
            masked_image = cv2.bitwise_not(masked_image)

            # Saturation adjustment
            hsv_image = cv2.cvtColor(enhanced_image, cv2.COLOR_BGR2HSV)
            hsv_image[..., 1] = np.uint8(np.clip(hsv_image[..., 1] * 1.7, 20, 150))
            final_image = cv2.cvtColor(hsv_image, cv2.COLOR_HSV2BGR)

            # Save the enhanced image
            output_path = os.path.join(output_directory, file_name)
            cv2.imwrite(output_path, final_image)

            # Update the progress bar
            progress.update(1)
            progress.set_postfix_str("{:.1f}%".format((index + 1) / total_files_count * 100))

# Call the function to enhance low light images
enhance_night_images()
